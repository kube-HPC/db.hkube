import { DataSourcesCollection } from './DataSource.d';
/*---------------------------------------------------------
 * Copyright (C) Hkube. All rights reserved.
 *--------------------------------------------------------*/
import Collection from './MongoDB/Collection';
import { Id } from './MongoDB/types';

export type FileMeta = {
    id: string;
    name: string;
    /** The file's location in the repository */
    path: string;
    /** Size in bytes */
    size: number;
    /** Mime type */
    type: string;
    /** An extra text content the user can upload per file */
    meta?: string;
    uploadedAt: number;
};

type DataSourceWithCredentials = {
    id?: Id;
    name: string;
    /** A commit message for the description */
    versionDescription: string;
    /** A hash generated by git for each version */
    commitHash: string;
    files: FileMeta[];
    isPartial: boolean;
    repositoryUrl: string;
    _credentials: {
        storage: ExternalStorage;
        git: ExternalGit;
    };
};
export type DataSource = Omit<DataSourceWithCredentials, '_credentials'>;

export type DataSourceStorage = {
    storage: ExternalStorage;
    git: ExternalGit;
};

export type DataSourceMeta = {
    id: Id;
    name: string;
    versionDescription: string;
    filesCount: number;
    avgFileSize: string;
    totalSize: number;
    fileTypes: string[];
};
export type ExternalGit = {
    organization: string;
    endpoint: string;
    token: string;
};

export type ExternalStorage = {
    accessKeyId: string;
    secretAccessKey: string;
    endpoint: string;
    useSSL: boolean;
};

export type DataSourceWithMeta = DataSource & DataSourceMeta;

export type DataSourceVersion = {
    id: Id;
    versionDescription: string;
    commitHash: string;
};
export interface DataSourcesCollection
    extends Collection<DataSource>,
        DataSourceOverrides {
    create(props: {
        name: string;
        git: ExternalGit;
        storage: ExternalStorage;
    }): Promise<DataSource>;
    createVersion(params: {
        name?: string;
        id?: Id;
        versionDescription: string;
    }): Promise<DataSourceWithCredentials>;
    updateFiles(params: {
        name?: string;
        id?: Id;
        commitHash: string;
        files: FileMeta[];
    }): Promise<DataSourceWithMeta>;
    fetchWithCredentials: (
        ...params: Parameters<typeof Collection.prototype.fetch>
    ) => Promise<DataSourceWithCredentials>;
    listDataSources(): Promise<DataSourceMeta[]>;
    listVersions(params: { name: string }): Promise<DataSourceVersion[]>;
    setRepositoryUrl({ name: string }, { url: string }): Promise<null>;
}
