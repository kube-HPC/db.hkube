import { Id } from './types';

/**
 * This is auto-generated by openapi-typescript, from swagger of the API-Server Maybe we can build
 * something that will do it automatically.
 */
export type Pipeline = {
    /** Unique identifier representing a specific pipeline */
    name: string;
    kind?: 'batch' | 'stream';
    /** Experiment name */
    experimentName?: string;
    /** Pipeline description */
    description?: string;
    /** Array of nodes */
    nodes: {
        /** Unique node identifier */
        nodeName: string;
        /** Unique identifier representing a specific algorithm */
        algorithmName?: string;
        /** Unique identifier representing a specific pipeline */
        pipelineName?: string;
        /** The input for the algorithm */
        input?: { [key: string]: any }[];
        /** Algorithm execution time to live in seconds. 0 to disable */
        ttl?: number;
        includeInResult?: boolean;
        metrics?: {
            /** Should tensorboard metrics be collected. */
            tensorboard?: boolean;
        };
        retry?: {
            policy?: 'Never' | 'Always' | 'OnError' | 'OnCrash';
            limit?: number;
        };
        batchOperation?: 'indexed' | 'cartesian';
        stateType?: 'stateless' | 'stateful';
    }[];
    /** Input object */
    flowInput?: { [key: string]: any };
    webhooks?: {
        /** Url to activate upon progress */
        progress?: string;
        /** Url to activate upon result */
        result?: string;
    };
    /** Optional properties */
    options?: {
        /** Pipeline time to live in seconds */
        ttl?: number;
        batchTolerance?: number;
        concurrentPipelines?: { amount?: number; rejectOnFailure?: boolean };
        progressVerbosityLevel?: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'critical';
    };
    priority?: number;
    triggers?: {
        /** Pipelines to activate upon result */
        pipelines?: string[];
        cron?: {
            /** Cron job */
            pattern?: string;
            /** Enable or disable cron job */
            enabled?: boolean;
        };
    };
    /** Array of tags */
    tags?: string[];
    /** The root job id of the current tree */
    rootJobId?: string;
    /** Streaming options */
    streaming?: {
        /** Define custom streaming flow in simple syntax */
        customFlow?: { [key: string]: any };
    };
    /** Edges define relation between nodes */
    edges?: any[];
};

export interface PipelinesInterface {
    create(pipeline: Pipeline): Promise<Pipeline>;
    delete(props: { name: string }): Promise<string>;
    fetch(params: { name: string }): Promise<Pipeline>;
    fetchAll(): Promise<Pipeline[]>;
}
